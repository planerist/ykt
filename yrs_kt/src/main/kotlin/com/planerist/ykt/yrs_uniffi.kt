// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.planerist.ykt

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_yrs_uniffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_yrs_uniffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "yrs_uniffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}


































































































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "yrs_uniffi")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_yrs_uniffi_fn_clone_ydoc(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_free_ydoc(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_constructor_ydoc_new(`options`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_method_ydoc_auto_load(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ydoc_get_text(`ptr`: Pointer,`name`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_method_ydoc_get_type(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ydoc_guid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ydoc_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun uniffi_yrs_uniffi_fn_method_ydoc_parent_doc(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ydoc_prelim(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ydoc_should_load(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ydoc_transaction(`ptr`: Pointer,`origin`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_clone_ysnapshot(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_free_ysnapshot(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_clone_ytext(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_free_ytext(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_constructor_ytext_new_with_text(`init`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_method_ytext_alive(`ptr`: Pointer,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ytext_delete(`ptr`: Pointer,`index`: Int,`length`: Int,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytext_format(`ptr`: Pointer,`index`: Int,`length`: Int,`attributes`: RustBuffer.ByValue,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytext_get_type(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ytext_insert(`ptr`: Pointer,`index`: Int,`chunk`: RustBuffer.ByValue,`attributes`: RustBuffer.ByValue,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytext_length(`ptr`: Pointer,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_yrs_uniffi_fn_method_ytext_prelim(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_method_ytext_push(`ptr`: Pointer,`chunk`: RustBuffer.ByValue,`attributes`: RustBuffer.ByValue,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytext_to_json(`ptr`: Pointer,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytext_to_string(`ptr`: Pointer,`txn`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_clone_ytransaction(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_free_ytransaction(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytransaction_after_state(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_apply_v1(`ptr`: Pointer,`diff`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytransaction_apply_v2(`ptr`: Pointer,`diff`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytransaction_before_state(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_commit(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytransaction_diff_v1(`ptr`: Pointer,`vector`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_diff_v2(`ptr`: Pointer,`vector`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_encode_update(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_encode_update_v2(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_gc(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_method_ytransaction_origin(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_method_ytransaction_state_vector_v1(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_apply_update(`doc`: Pointer,`update`: RustBuffer.ByValue,`origin`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_func_apply_update_v2(`doc`: Pointer,`update`: RustBuffer.ByValue,`origin`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_fn_func_debug_update_v1(`update`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_debug_update_v2(`update`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_decode_snapshot_v1(`snapshot`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_func_decode_snapshot_v2(`snapshot`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_yrs_uniffi_fn_func_encode_snapshot_v1(`snapshot`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_snapshot_v2(`snapshot`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_state_as_update(`doc`: Pointer,`vector`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_state_as_update_v2(`doc`: Pointer,`vector`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_state_from_snapshot_v1(`doc`: Pointer,`snapshot`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_state_from_snapshot_v2(`doc`: Pointer,`snapshot`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_encode_state_vector(`doc`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_yrs_uniffi_fn_func_equal_snapshots(`snap1`: Pointer,`snap2`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_yrs_uniffi_fn_func_snapshot(`doc`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_yrs_uniffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_yrs_uniffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_yrs_uniffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_yrs_uniffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_yrs_uniffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_yrs_uniffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_yrs_uniffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_yrs_uniffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_yrs_uniffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_yrs_uniffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_yrs_uniffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_yrs_uniffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_yrs_uniffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_yrs_uniffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_yrs_uniffi_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_yrs_uniffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_yrs_uniffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_yrs_uniffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_yrs_uniffi_checksum_func_apply_update(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_apply_update_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_debug_update_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_debug_update_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_decode_snapshot_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_decode_snapshot_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_snapshot_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_snapshot_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_state_as_update(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_state_as_update_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_state_from_snapshot_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_state_from_snapshot_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_encode_state_vector(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_equal_snapshots(
    ): Short
    fun uniffi_yrs_uniffi_checksum_func_snapshot(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_auto_load(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_get_text(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_get_type(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_guid(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_id(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_parent_doc(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_prelim(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_should_load(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ydoc_transaction(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_alive(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_delete(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_format(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_get_type(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_insert(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_length(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_prelim(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_push(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_to_json(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytext_to_string(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_after_state(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_apply_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_apply_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_before_state(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_commit(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_diff_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_diff_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_encode_update(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_encode_update_v2(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_gc(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_origin(
    ): Short
    fun uniffi_yrs_uniffi_checksum_method_ytransaction_state_vector_v1(
    ): Short
    fun uniffi_yrs_uniffi_checksum_constructor_ydoc_new(
    ): Short
    fun uniffi_yrs_uniffi_checksum_constructor_ytext_new_with_text(
    ): Short
    fun ffi_yrs_uniffi_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_yrs_uniffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_yrs_uniffi_checksum_func_apply_update() != 16420.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_apply_update_v2() != 18278.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_debug_update_v1() != 46727.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_debug_update_v2() != 57539.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_decode_snapshot_v1() != 55189.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_decode_snapshot_v2() != 10386.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_snapshot_v1() != 5400.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_snapshot_v2() != 61047.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_state_as_update() != 33823.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_state_as_update_v2() != 37277.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_state_from_snapshot_v1() != 6351.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_state_from_snapshot_v2() != 28213.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_encode_state_vector() != 52081.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_equal_snapshots() != 34363.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_func_snapshot() != 13087.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_auto_load() != 63854.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_get_text() != 51149.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_get_type() != 17853.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_guid() != 35288.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_id() != 20910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_parent_doc() != 26079.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_prelim() != 55677.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_should_load() != 23329.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ydoc_transaction() != 61154.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_alive() != 49729.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_delete() != 40951.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_format() != 43479.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_get_type() != 33229.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_insert() != 34842.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_length() != 38016.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_prelim() != 12973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_push() != 13242.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_to_json() != 14103.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytext_to_string() != 29515.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_after_state() != 54691.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_apply_v1() != 46509.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_apply_v2() != 13947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_before_state() != 5427.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_commit() != 16889.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_diff_v1() != 24409.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_diff_v2() != 33519.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_encode_update() != 22843.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_encode_update_v2() != 38148.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_gc() != 20051.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_origin() != 43208.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_method_ytransaction_state_vector_v1() != 57921.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_constructor_ydoc_new() != 35001.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_yrs_uniffi_checksum_constructor_ytext_new_with_text() != 34623.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8UL

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
/**
 * A ywasm document type. Documents are most important units of collaborative resources management.
 * All shared collections live within a scope of their corresponding documents. All updates are
 * generated on per-document basis (rather than individual shared type). All operations on shared
 * collections happen via [YTransaction], which lifetime is also bound to a document.
 *
 * Document manages so-called root types, which are top-level shared types definitions (as opposed
 * to recursively nested types).
 *
 * A basic workflow sample:
 *
 * ```javascript
 * import YDoc from 'ywasm'
 *
 * const doc = new YDoc()
 * const txn = doc.beginTransaction()
 * try {
 * const text = txn.getText('name')
 * text.push(txn, 'hello world')
 * const output = text.toString(txn)
 * console.log(output)
 * } finally {
 * txn.free()
 * }
 * ```
 */
public interface YDocInterface {
    
    fun `autoLoad`(): kotlin.Boolean
    
    /**
     * Returns a `YText` shared data type, that's accessible for subsequent accesses using given
     * `name`.
     *
     * If there was no instance with this name before, it will be created and then returned.
     *
     * If there was an instance with this name, but it was of different type, it will be projected
     * onto `YText` instance.
     */
    fun `getText`(`name`: kotlin.String): YText
    
    fun `getType`(): kotlin.UByte
    
    /**
     * Gets globally unique identifier of this `YDoc` instance.
     */
    fun `guid`(): kotlin.String
    
    /**
     * Gets unique peer identifier of this `YDoc` instance.
     */
    fun `id`(): kotlin.Double
    
    /**
     * Returns a parent document of this document or null if current document is not sub-document.
     */
    fun `parentDoc`(): YDoc?
    
    /**
     * Checks if a document is a preliminary type. It returns false, if current document
     * is already a sub-document of another document.
     */
    fun `prelim`(): kotlin.Boolean
    
    fun `shouldLoad`(): kotlin.Boolean
    
    /**
     * Returns a new transaction for this document. Ywasm shared data types execute their
     * operations in a context of a given transaction. Each document can have only one active
     * transaction at the time - subsequent attempts will cause exception to be thrown.
     *
     * Transactions started with `doc.beginTransaction` can be released using `transaction.free`
     * method.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * // helper function used to simplify transaction
     * // create/release cycle
     * YDoc.prototype.transact = callback => {
     * const txn = this.transaction()
     * try {
     * return callback(txn)
     * } finally {
     * txn.free()
     * }
     * }
     *
     * const doc = new YDoc()
     * const text = doc.getText('name')
     * doc.transact(txn => text.insert(txn, 0, 'hello world'))
     * ```
     */
    fun `transaction`(`origin`: kotlin.ByteArray?): YTransaction
    
    companion object
}

/**
 * A ywasm document type. Documents are most important units of collaborative resources management.
 * All shared collections live within a scope of their corresponding documents. All updates are
 * generated on per-document basis (rather than individual shared type). All operations on shared
 * collections happen via [YTransaction], which lifetime is also bound to a document.
 *
 * Document manages so-called root types, which are top-level shared types definitions (as opposed
 * to recursively nested types).
 *
 * A basic workflow sample:
 *
 * ```javascript
 * import YDoc from 'ywasm'
 *
 * const doc = new YDoc()
 * const txn = doc.beginTransaction()
 * try {
 * const text = txn.getText('name')
 * text.push(txn, 'hello world')
 * const output = text.toString(txn)
 * console.log(output)
 * } finally {
 * txn.free()
 * }
 * ```
 */
open class YDoc: Disposable, AutoCloseable, YDocInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Creates a new ywasm document. If `id` parameter was passed it will be used as this document
     * globally unique identifier (it's up to caller to ensure that requirement). Otherwise it will
     * be assigned a randomly generated number.
     */
    constructor(`options`: DocOptions?) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_constructor_ydoc_new(
        FfiConverterOptionalTypeDocOptions.lower(`options`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_free_ydoc(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_clone_ydoc(pointer!!, status)
        }
    }

    override fun `autoLoad`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_auto_load(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Returns a `YText` shared data type, that's accessible for subsequent accesses using given
     * `name`.
     *
     * If there was no instance with this name before, it will be created and then returned.
     *
     * If there was an instance with this name, but it was of different type, it will be projected
     * onto `YText` instance.
     */override fun `getText`(`name`: kotlin.String): YText {
            return FfiConverterTypeYText.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_get_text(
        it, FfiConverterString.lower(`name`),_status)
}
    }
    )
    }
    

    override fun `getType`(): kotlin.UByte {
            return FfiConverterUByte.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_get_type(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Gets globally unique identifier of this `YDoc` instance.
     */override fun `guid`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_guid(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Gets unique peer identifier of this `YDoc` instance.
     */override fun `id`(): kotlin.Double {
            return FfiConverterDouble.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_id(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Returns a parent document of this document or null if current document is not sub-document.
     */override fun `parentDoc`(): YDoc? {
            return FfiConverterOptionalTypeYDoc.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_parent_doc(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Checks if a document is a preliminary type. It returns false, if current document
     * is already a sub-document of another document.
     */override fun `prelim`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_prelim(
        it, _status)
}
    }
    )
    }
    

    override fun `shouldLoad`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_should_load(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Returns a new transaction for this document. Ywasm shared data types execute their
     * operations in a context of a given transaction. Each document can have only one active
     * transaction at the time - subsequent attempts will cause exception to be thrown.
     *
     * Transactions started with `doc.beginTransaction` can be released using `transaction.free`
     * method.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * // helper function used to simplify transaction
     * // create/release cycle
     * YDoc.prototype.transact = callback => {
     * const txn = this.transaction()
     * try {
     * return callback(txn)
     * } finally {
     * txn.free()
     * }
     * }
     *
     * const doc = new YDoc()
     * const text = doc.getText('name')
     * doc.transact(txn => text.insert(txn, 0, 'hello world'))
     * ```
     */override fun `transaction`(`origin`: kotlin.ByteArray?): YTransaction {
            return FfiConverterTypeYTransaction.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ydoc_transaction(
        it, FfiConverterOptionalByteArray.lower(`origin`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeYDoc: FfiConverter<YDoc, Pointer> {

    override fun lower(value: YDoc): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): YDoc {
        return YDoc(value)
    }

    override fun read(buf: ByteBuffer): YDoc {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: YDoc) = 8UL

    override fun write(value: YDoc, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface YSnapshotInterface {
    
    companion object
}

open class YSnapshot: Disposable, AutoCloseable, YSnapshotInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_free_ysnapshot(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_clone_ysnapshot(pointer!!, status)
        }
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeYSnapshot: FfiConverter<YSnapshot, Pointer> {

    override fun lower(value: YSnapshot): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): YSnapshot {
        return YSnapshot(value)
    }

    override fun read(buf: ByteBuffer): YSnapshot {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: YSnapshot) = 8UL

    override fun write(value: YSnapshot, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * A shared data type used for collaborative text editing. It enables multiple users to add and
 * remove chunks of text in efficient manner. This type is internally represented as a mutable
 * double-linked list of text chunks - an optimization occurs during `YTransaction.commit`, which
 * allows to squash multiple consecutively inserted characters together as a single chunk of text
 * even between transaction boundaries in order to preserve more efficient memory model.
 *
 * `YText` structure internally uses UTF-8 encoding and its length is described in a number of
 * bytes rather than individual characters (a single UTF-8 code point can consist of many bytes).
 *
 * Like all Yrs shared data types, `YText` is resistant to the problem of interleaving (situation
 * when characters inserted one after another may interleave with other peers concurrent inserts
 * after merging all updates together). In case of Yrs conflict resolution is solved by using
 * unique document id to determine correct and consistent ordering.
 */
public interface YTextInterface {
    
    /**
     * Checks if current YArray reference is alive and has not been deleted by its parent collection.
     * This method only works on already integrated shared types and will return false is current
     * type is preliminary (has not been integrated into document).
     */
    fun `alive`(`txn`: YTransaction): kotlin.Boolean
    
    /**
     * Deletes a specified range of of characters, starting at a given `index`.
     * Both `index` and `length` are counted in terms of a number of UTF-8 character bytes.
     */
    fun `delete`(`index`: kotlin.UInt, `length`: kotlin.UInt, `txn`: YTransaction)
    
    /**
     * Wraps an existing piece of text within a range described by `index`-`length` parameters with
     * formatting blocks containing provided `attributes` metadata. This method only works for
     * `YText` instances that already have been integrated into document store.
     */
    fun `format`(`index`: kotlin.UInt, `length`: kotlin.UInt, `attributes`: kotlin.String, `txn`: YTransaction)
    
    fun `getType`(): kotlin.UByte
    
    /**
     * Inserts a given `chunk` of text into this `YText` instance, starting at a given `index`.
     *
     * Optional object with defined `attributes` will be used to wrap provided text `chunk`
     * with a formatting blocks.`attributes` are only supported for a `YText` instance which
     * already has been integrated into document store.
     */
    fun `insert`(`index`: kotlin.UInt, `chunk`: kotlin.String, `attributes`: kotlin.String?, `txn`: YTransaction)
    
    /**
     * Returns length of an underlying string stored in this `YText` instance,
     * understood as a number of UTF-8 encoded bytes.
     */
    fun `length`(`txn`: YTransaction): kotlin.UInt
    
    /**
     * Returns true if this is a preliminary instance of `YArray`.
     *
     * Preliminary instances can be nested into other shared data types such as `YArray` and `YMap`.
     * Once a preliminary instance has been inserted this way, it becomes integrated into ywasm
     * document store and cannot be nested again: attempt to do so will result in an exception.
     */
    fun `prelim`(): kotlin.Boolean
    
    /**
     * Appends a given `chunk` of text at the end of current `YText` instance.
     *
     * Optional object with defined `attributes` will be used to wrap provided text `chunk`
     * with a formatting blocks.`attributes` are only supported for a `YText` instance which
     * already has been integrated into document store.
     */
    fun `push`(`chunk`: kotlin.String, `attributes`: kotlin.String, `txn`: YTransaction)
    
    fun `toJson`(`txn`: YTransaction): kotlin.String
    
    /**
     * Returns an underlying shared string stored in this data type.
     */
    fun `toString`(`txn`: YTransaction): kotlin.String
    
    companion object
}

/**
 * A shared data type used for collaborative text editing. It enables multiple users to add and
 * remove chunks of text in efficient manner. This type is internally represented as a mutable
 * double-linked list of text chunks - an optimization occurs during `YTransaction.commit`, which
 * allows to squash multiple consecutively inserted characters together as a single chunk of text
 * even between transaction boundaries in order to preserve more efficient memory model.
 *
 * `YText` structure internally uses UTF-8 encoding and its length is described in a number of
 * bytes rather than individual characters (a single UTF-8 code point can consist of many bytes).
 *
 * Like all Yrs shared data types, `YText` is resistant to the problem of interleaving (situation
 * when characters inserted one after another may interleave with other peers concurrent inserts
 * after merging all updates together). In case of Yrs conflict resolution is solved by using
 * unique document id to determine correct and consistent ordering.
 */
open class YText: Disposable, AutoCloseable, YTextInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_free_ytext(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_clone_ytext(pointer!!, status)
        }
    }

    
    /**
     * Checks if current YArray reference is alive and has not been deleted by its parent collection.
     * This method only works on already integrated shared types and will return false is current
     * type is preliminary (has not been integrated into document).
     */override fun `alive`(`txn`: YTransaction): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_alive(
        it, FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    )
    }
    

    
    /**
     * Deletes a specified range of of characters, starting at a given `index`.
     * Both `index` and `length` are counted in terms of a number of UTF-8 character bytes.
     */
    @Throws(Exception::class)override fun `delete`(`index`: kotlin.UInt, `length`: kotlin.UInt, `txn`: YTransaction)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_delete(
        it, FfiConverterUInt.lower(`index`),FfiConverterUInt.lower(`length`),FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    
    

    
    /**
     * Wraps an existing piece of text within a range described by `index`-`length` parameters with
     * formatting blocks containing provided `attributes` metadata. This method only works for
     * `YText` instances that already have been integrated into document store.
     */
    @Throws(Exception::class)override fun `format`(`index`: kotlin.UInt, `length`: kotlin.UInt, `attributes`: kotlin.String, `txn`: YTransaction)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_format(
        it, FfiConverterUInt.lower(`index`),FfiConverterUInt.lower(`length`),FfiConverterString.lower(`attributes`),FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    
    

    override fun `getType`(): kotlin.UByte {
            return FfiConverterUByte.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_get_type(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Inserts a given `chunk` of text into this `YText` instance, starting at a given `index`.
     *
     * Optional object with defined `attributes` will be used to wrap provided text `chunk`
     * with a formatting blocks.`attributes` are only supported for a `YText` instance which
     * already has been integrated into document store.
     */
    @Throws(Exception::class)override fun `insert`(`index`: kotlin.UInt, `chunk`: kotlin.String, `attributes`: kotlin.String?, `txn`: YTransaction)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_insert(
        it, FfiConverterUInt.lower(`index`),FfiConverterString.lower(`chunk`),FfiConverterOptionalString.lower(`attributes`),FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    
    

    
    /**
     * Returns length of an underlying string stored in this `YText` instance,
     * understood as a number of UTF-8 encoded bytes.
     */
    @Throws(Exception::class)override fun `length`(`txn`: YTransaction): kotlin.UInt {
            return FfiConverterUInt.lift(
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_length(
        it, FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    )
    }
    

    
    /**
     * Returns true if this is a preliminary instance of `YArray`.
     *
     * Preliminary instances can be nested into other shared data types such as `YArray` and `YMap`.
     * Once a preliminary instance has been inserted this way, it becomes integrated into ywasm
     * document store and cannot be nested again: attempt to do so will result in an exception.
     */override fun `prelim`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_prelim(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Appends a given `chunk` of text at the end of current `YText` instance.
     *
     * Optional object with defined `attributes` will be used to wrap provided text `chunk`
     * with a formatting blocks.`attributes` are only supported for a `YText` instance which
     * already has been integrated into document store.
     */
    @Throws(Exception::class)override fun `push`(`chunk`: kotlin.String, `attributes`: kotlin.String, `txn`: YTransaction)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_push(
        it, FfiConverterString.lower(`chunk`),FfiConverterString.lower(`attributes`),FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    
    

    
    @Throws(Exception::class)override fun `toJson`(`txn`: YTransaction): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_to_json(
        it, FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    )
    }
    

    
    /**
     * Returns an underlying shared string stored in this data type.
     */
    @Throws(Exception::class)override fun `toString`(`txn`: YTransaction): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytext_to_string(
        it, FfiConverterTypeYTransaction.lower(`txn`),_status)
}
    }
    )
    }
    

    

    
    companion object {
        
    /**
     * Creates a new preliminary instance of a `YText` shared data type, with its state initialized
     * to provided parameter.
     *
     * Preliminary instances can be nested into other shared data types such as `YArray` and `YMap`.
     * Once a preliminary instance has been inserted this way, it becomes integrated into ywasm
     * document store and cannot be nested again: attempt to do so will result in an exception.
     */ fun `newWithText`(`init`: kotlin.String?): YText {
            return FfiConverterTypeYText.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_constructor_ytext_new_with_text(
        FfiConverterOptionalString.lower(`init`),_status)
}
    )
    }
    

        
    }
    
}

/**
 * @suppress
 */
public object FfiConverterTypeYText: FfiConverter<YText, Pointer> {

    override fun lower(value: YText): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): YText {
        return YText(value)
    }

    override fun read(buf: ByteBuffer): YText {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: YText) = 8UL

    override fun write(value: YText, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface YTransactionInterface {
    
    /**
     * Returns state vector describing the current state of
     * the document.
     */
    fun `afterState`(): Map<kotlin.ULong, kotlin.UInt>
    
    /**
     * Applies delta update generated by the remote document replica to a current transaction's
     * document. This method assumes that a payload maintains lib0 v1 encoding format.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    fun `applyV1`(`diff`: kotlin.ByteArray)
    
    /**
     * Applies delta update generated by the remote document replica to a current transaction's
     * document. This method assumes that a payload maintains lib0 v2 encoding format.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV2(localSv)
     * localTxn.applyV2(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    fun `applyV2`(`diff`: kotlin.ByteArray)
    
    /**
     * Returns state vector describing the state of the document
     * at the moment when the transaction began.
     */
    fun `beforeState`(): Map<kotlin.ULong, kotlin.UInt>
    
    /**
     * Triggers a post-update series of operations without `free`ing the transaction. This includes
     * compaction and optimization of internal representation of updates, triggering events etc.
     * ywasm transactions are auto-committed when they are `free`d.
     */
    fun `commit`()
    
    /**
     * Encodes all updates that have happened since a given version `vector` into a compact delta
     * representation using lib0 v1 encoding. If `vector` parameter has not been provided, generated
     * delta payload will contain all changes of a current ywasm document, working effectively as
     * its state snapshot.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    fun `diffV1`(`vector`: kotlin.ByteArray): kotlin.ByteArray
    
    /**
     * Encodes all updates that have happened since a given version `vector` into a compact delta
     * representation using lib0 v1 encoding. If `vector` parameter has not been provided, generated
     * delta payload will contain all changes of a current ywasm document, working effectively as
     * its state snapshot.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV2(localSv)
     * localTxn.applyV2(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    fun `diffV2`(`vector`: kotlin.ByteArray): kotlin.ByteArray
    
    fun `encodeUpdate`(): kotlin.ByteArray
    
    fun `encodeUpdateV2`(): kotlin.ByteArray
    
    /**
     * Force garbage collection of the deleted elements, regardless of a parent doc was created
     * with `gc` option turned on or off.
     */
    fun `gc`()
    
    fun `origin`(): kotlin.ByteArray?
    
    /**
     * Encodes a state vector of a given transaction document into its binary representation using
     * lib0 v1 encoding. State vector is a compact representation of updates performed on a given
     * document and can be used by `encode_state_as_update` on remote peer to generate a delta
     * update payload to synchronize changes between peers.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    fun `stateVectorV1`(): kotlin.ByteArray
    
    companion object
}

open class YTransaction: Disposable, AutoCloseable, YTransactionInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_free_ytransaction(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_clone_ytransaction(pointer!!, status)
        }
    }

    
    /**
     * Returns state vector describing the current state of
     * the document.
     */override fun `afterState`(): Map<kotlin.ULong, kotlin.UInt> {
            return FfiConverterMapULongUInt.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_after_state(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Applies delta update generated by the remote document replica to a current transaction's
     * document. This method assumes that a payload maintains lib0 v1 encoding format.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    @Throws(Exception::class)override fun `applyV1`(`diff`: kotlin.ByteArray)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_apply_v1(
        it, FfiConverterByteArray.lower(`diff`),_status)
}
    }
    
    

    
    /**
     * Applies delta update generated by the remote document replica to a current transaction's
     * document. This method assumes that a payload maintains lib0 v2 encoding format.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV2(localSv)
     * localTxn.applyV2(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    @Throws(Exception::class)override fun `applyV2`(`diff`: kotlin.ByteArray)
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_apply_v2(
        it, FfiConverterByteArray.lower(`diff`),_status)
}
    }
    
    

    
    /**
     * Returns state vector describing the state of the document
     * at the moment when the transaction began.
     */override fun `beforeState`(): Map<kotlin.ULong, kotlin.UInt> {
            return FfiConverterMapULongUInt.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_before_state(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Triggers a post-update series of operations without `free`ing the transaction. This includes
     * compaction and optimization of internal representation of updates, triggering events etc.
     * ywasm transactions are auto-committed when they are `free`d.
     */
    @Throws(Exception::class)override fun `commit`()
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_commit(
        it, _status)
}
    }
    
    

    
    /**
     * Encodes all updates that have happened since a given version `vector` into a compact delta
     * representation using lib0 v1 encoding. If `vector` parameter has not been provided, generated
     * delta payload will contain all changes of a current ywasm document, working effectively as
     * its state snapshot.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    @Throws(Exception::class)override fun `diffV1`(`vector`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_diff_v1(
        it, FfiConverterByteArray.lower(`vector`),_status)
}
    }
    )
    }
    

    
    /**
     * Encodes all updates that have happened since a given version `vector` into a compact delta
     * representation using lib0 v1 encoding. If `vector` parameter has not been provided, generated
     * delta payload will contain all changes of a current ywasm document, working effectively as
     * its state snapshot.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV2(localSv)
     * localTxn.applyV2(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */
    @Throws(Exception::class)override fun `diffV2`(`vector`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_diff_v2(
        it, FfiConverterByteArray.lower(`vector`),_status)
}
    }
    )
    }
    

    override fun `encodeUpdate`(): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_encode_update(
        it, _status)
}
    }
    )
    }
    

    override fun `encodeUpdateV2`(): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_encode_update_v2(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Force garbage collection of the deleted elements, regardless of a parent doc was created
     * with `gc` option turned on or off.
     */
    @Throws(Exception::class)override fun `gc`()
        = 
    callWithPointer {
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_gc(
        it, _status)
}
    }
    
    

    override fun `origin`(): kotlin.ByteArray? {
            return FfiConverterOptionalByteArray.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_origin(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Encodes a state vector of a given transaction document into its binary representation using
     * lib0 v1 encoding. State vector is a compact representation of updates performed on a given
     * document and can be used by `encode_state_as_update` on remote peer to generate a delta
     * update payload to synchronize changes between peers.
     *
     * Example:
     *
     * ```javascript
     * import YDoc from 'ywasm'
     *
     * /// document on machine A
     * const localDoc = new YDoc()
     * const localTxn = localDoc.beginTransaction()
     *
     * // document on machine B
     * const remoteDoc = new YDoc()
     * const remoteTxn = localDoc.beginTransaction()
     *
     * try {
     * const localSV = localTxn.stateVectorV1()
     * const remoteDelta = remoteTxn.diffV1(localSv)
     * localTxn.applyV1(remoteDelta)
     * } finally {
     * localTxn.free()
     * remoteTxn.free()
     * }
     * ```
     */override fun `stateVectorV1`(): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_method_ytransaction_state_vector_v1(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeYTransaction: FfiConverter<YTransaction, Pointer> {

    override fun lower(value: YTransaction): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): YTransaction {
        return YTransaction(value)
    }

    override fun read(buf: ByteBuffer): YTransaction {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: YTransaction) = 8UL

    override fun write(value: YTransaction, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class DocOptions (
    var `clientId`: kotlin.ULong?, 
    var `guid`: kotlin.String?, 
    var `collectionId`: kotlin.String?, 
    var `gc`: kotlin.Boolean?, 
    var `autoLoad`: kotlin.Boolean?, 
    var `shouldLoad`: kotlin.Boolean?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeDocOptions: FfiConverterRustBuffer<DocOptions> {
    override fun read(buf: ByteBuffer): DocOptions {
        return DocOptions(
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: DocOptions) = (
            FfiConverterOptionalULong.allocationSize(value.`clientId`) +
            FfiConverterOptionalString.allocationSize(value.`guid`) +
            FfiConverterOptionalString.allocationSize(value.`collectionId`) +
            FfiConverterOptionalBoolean.allocationSize(value.`gc`) +
            FfiConverterOptionalBoolean.allocationSize(value.`autoLoad`) +
            FfiConverterOptionalBoolean.allocationSize(value.`shouldLoad`)
    )

    override fun write(value: DocOptions, buf: ByteBuffer) {
            FfiConverterOptionalULong.write(value.`clientId`, buf)
            FfiConverterOptionalString.write(value.`guid`, buf)
            FfiConverterOptionalString.write(value.`collectionId`, buf)
            FfiConverterOptionalBoolean.write(value.`gc`, buf)
            FfiConverterOptionalBoolean.write(value.`autoLoad`, buf)
            FfiConverterOptionalBoolean.write(value.`shouldLoad`, buf)
    }
}





sealed class Exception: kotlin.Exception() {
    
    class InvalidTransactionCtx(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class RefDisposed(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class AnotherTx(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class AnotherRwTx(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class InvalidPrelimOp(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class InvalidFmt(
        ) : Exception() {
        override val message
            get() = ""
    }
    
    class Custom(
        
        val v1: kotlin.String
        ) : Exception() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class InvalidData(
        
        val v1: kotlin.String
        ) : Exception() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class InvalidParent(
        ) : Exception() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<Exception> {
        override fun lift(error_buf: RustBuffer.ByValue): Exception = FfiConverterTypeError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeError : FfiConverterRustBuffer<Exception> {
    override fun read(buf: ByteBuffer): Exception {
        

        return when(buf.getInt()) {
            1 -> Exception.InvalidTransactionCtx()
            2 -> Exception.RefDisposed()
            3 -> Exception.AnotherTx()
            4 -> Exception.AnotherRwTx()
            5 -> Exception.InvalidPrelimOp()
            6 -> Exception.InvalidFmt()
            7 -> Exception.Custom(
                FfiConverterString.read(buf),
                )
            8 -> Exception.InvalidData(
                FfiConverterString.read(buf),
                )
            9 -> Exception.InvalidParent()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Exception): ULong {
        return when(value) {
            is Exception.InvalidTransactionCtx -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.RefDisposed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.AnotherTx -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.AnotherRwTx -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.InvalidPrelimOp -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.InvalidFmt -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is Exception.Custom -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is Exception.InvalidData -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is Exception.InvalidParent -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: Exception, buf: ByteBuffer) {
        when(value) {
            is Exception.InvalidTransactionCtx -> {
                buf.putInt(1)
                Unit
            }
            is Exception.RefDisposed -> {
                buf.putInt(2)
                Unit
            }
            is Exception.AnotherTx -> {
                buf.putInt(3)
                Unit
            }
            is Exception.AnotherRwTx -> {
                buf.putInt(4)
                Unit
            }
            is Exception.InvalidPrelimOp -> {
                buf.putInt(5)
                Unit
            }
            is Exception.InvalidFmt -> {
                buf.putInt(6)
                Unit
            }
            is Exception.Custom -> {
                buf.putInt(7)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is Exception.InvalidData -> {
                buf.putInt(8)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is Exception.InvalidParent -> {
                buf.putInt(9)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




/**
 * @suppress
 */
public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeYDoc: FfiConverterRustBuffer<YDoc?> {
    override fun read(buf: ByteBuffer): YDoc? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeYDoc.read(buf)
    }

    override fun allocationSize(value: YDoc?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeYDoc.allocationSize(value)
        }
    }

    override fun write(value: YDoc?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeYDoc.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeDocOptions: FfiConverterRustBuffer<DocOptions?> {
    override fun read(buf: ByteBuffer): DocOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDocOptions.read(buf)
    }

    override fun allocationSize(value: DocOptions?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDocOptions.allocationSize(value)
        }
    }

    override fun write(value: DocOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDocOptions.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapULongUInt: FfiConverterRustBuffer<Map<kotlin.ULong, kotlin.UInt>> {
    override fun read(buf: ByteBuffer): Map<kotlin.ULong, kotlin.UInt> {
        val len = buf.getInt()
        return buildMap<kotlin.ULong, kotlin.UInt>(len) {
            repeat(len) {
                val k = FfiConverterULong.read(buf)
                val v = FfiConverterUInt.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.ULong, kotlin.UInt>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterULong.allocationSize(k) +
            FfiConverterUInt.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.ULong, kotlin.UInt>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterULong.write(k, buf)
            FfiConverterUInt.write(v, buf)
        }
    }
}
        /**
         * Applies delta update generated by the remote document replica to a current document. This
         * method assumes that a payload maintains lib0 v1 encoding format.
         *
         * Example:
         *
         * ```javascript
         * import {YDoc, encodeStateVector, encodeStateAsUpdate, applyUpdate} from 'ywasm'
         *
         * /// document on machine A
         * const localDoc = new YDoc()
         * const localSV = encodeStateVector(localDoc)
         *
         * // document on machine B
         * const remoteDoc = new YDoc()
         * const remoteDelta = encodeStateAsUpdate(remoteDoc, localSV)
         *
         * applyUpdateV2(localDoc, remoteDelta)
         * ```
         */
    @Throws(Exception::class) fun `applyUpdate`(`doc`: YDoc, `update`: kotlin.ByteArray, `origin`: kotlin.ByteArray?)
        = 
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_apply_update(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterByteArray.lower(`update`),FfiConverterOptionalByteArray.lower(`origin`),_status)
}
    
    

        /**
         * Applies delta update generated by the remote document replica to a current document. This
         * method assumes that a payload maintains lib0 v2 encoding format.
         *
         * Example:
         *
         * ```javascript
         * import {YDoc, encodeStateVector, encodeStateAsUpdate, applyUpdate} from 'ywasm'
         *
         * /// document on machine A
         * const localDoc = new YDoc()
         * const localSV = encodeStateVector(localDoc)
         *
         * // document on machine B
         * const remoteDoc = new YDoc()
         * const remoteDelta = encodeStateAsUpdateV2(remoteDoc, localSV)
         *
         * applyUpdateV2(localDoc, remoteDelta)
         * ```
         */
    @Throws(Exception::class) fun `applyUpdateV2`(`doc`: YDoc, `update`: kotlin.ByteArray, `origin`: kotlin.ByteArray?)
        = 
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_apply_update_v2(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterByteArray.lower(`update`),FfiConverterOptionalByteArray.lower(`origin`),_status)
}
    
    

        /**
         * Returns a string dump representation of a given `update` encoded using lib0 v1 encoding.
         */
    @Throws(Exception::class) fun `debugUpdateV1`(`update`: kotlin.ByteArray): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_debug_update_v1(
        FfiConverterByteArray.lower(`update`),_status)
}
    )
    }
    

        /**
         * Returns a string dump representation of a given `update` encoded using lib0 v2 encoding.
         */
    @Throws(Exception::class) fun `debugUpdateV2`(`update`: kotlin.ByteArray): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_debug_update_v2(
        FfiConverterByteArray.lower(`update`),_status)
}
    )
    }
    

    @Throws(Exception::class) fun `decodeSnapshotV1`(`snapshot`: kotlin.ByteArray): YSnapshot {
            return FfiConverterTypeYSnapshot.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_decode_snapshot_v1(
        FfiConverterByteArray.lower(`snapshot`),_status)
}
    )
    }
    

    @Throws(Exception::class) fun `decodeSnapshotV2`(`snapshot`: kotlin.ByteArray): YSnapshot {
            return FfiConverterTypeYSnapshot.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_decode_snapshot_v2(
        FfiConverterByteArray.lower(`snapshot`),_status)
}
    )
    }
    
 fun `encodeSnapshotV1`(`snapshot`: YSnapshot): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_snapshot_v1(
        FfiConverterTypeYSnapshot.lower(`snapshot`),_status)
}
    )
    }
    
 fun `encodeSnapshotV2`(`snapshot`: YSnapshot): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_snapshot_v2(
        FfiConverterTypeYSnapshot.lower(`snapshot`),_status)
}
    )
    }
    

        /**
         * Encodes all updates that have happened since a given version `vector` into a compact delta
         * representation using lib0 v1 encoding. If `vector` parameter has not been provided, generated
         * delta payload will contain all changes of a current ywasm document, working effectivelly as its
         * state snapshot.
         *
         * Example:
         *
         * ```javascript
         * import {YDoc, encodeStateVector, encodeStateAsUpdate, applyUpdate} from 'ywasm'
         *
         * /// document on machine A
         * const localDoc = new YDoc()
         * const localSV = encodeStateVector(localDoc)
         *
         * // document on machine B
         * const remoteDoc = new YDoc()
         * const remoteDelta = encodeStateAsUpdate(remoteDoc, localSV)
         *
         * applyUpdate(localDoc, remoteDelta)
         * ```
         */
    @Throws(Exception::class) fun `encodeStateAsUpdate`(`doc`: YDoc, `vector`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_state_as_update(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterByteArray.lower(`vector`),_status)
}
    )
    }
    

        /**
         * Encodes all updates that have happened since a given version `vector` into a compact delta
         * representation using lib0 v2 encoding. If `vector` parameter has not been provided, generated
         * delta payload will contain all changes of a current ywasm document, working effectivelly as its
         * state snapshot.
         *
         * Example:
         *
         * ```javascript
         * import {YDoc, encodeStateVector, encodeStateAsUpdate, applyUpdate} from 'ywasm'
         *
         * /// document on machine A
         * const localDoc = new YDoc()
         * const localSV = encodeStateVector(localDoc)
         *
         * // document on machine B
         * const remoteDoc = new YDoc()
         * const remoteDelta = encodeStateAsUpdateV2(remoteDoc, localSV)
         *
         * applyUpdate(localDoc, remoteDelta)
         * ```
         */
    @Throws(Exception::class) fun `encodeStateAsUpdateV2`(`doc`: YDoc, `vector`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_state_as_update_v2(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterByteArray.lower(`vector`),_status)
}
    )
    }
    

    @Throws(Exception::class) fun `encodeStateFromSnapshotV1`(`doc`: YDoc, `snapshot`: YSnapshot): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_state_from_snapshot_v1(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterTypeYSnapshot.lower(`snapshot`),_status)
}
    )
    }
    

    @Throws(Exception::class) fun `encodeStateFromSnapshotV2`(`doc`: YDoc, `snapshot`: YSnapshot): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_state_from_snapshot_v2(
        FfiConverterTypeYDoc.lower(`doc`),FfiConverterTypeYSnapshot.lower(`snapshot`),_status)
}
    )
    }
    

        /**
         * Encodes a state vector of a given ywasm document into its binary representation using lib0 v1
         * encoding. State vector is a compact representation of updates performed on a given document and
         * can be used by `encode_state_as_update` on remote peer to generate a delta update payload to
         * synchronize changes between peers.
         *
         * Example:
         *
         * ```javascript
         * import {YDoc, encodeStateVector, encodeStateAsUpdate, applyUpdate} from 'ywasm'
         *
         * /// document on machine A
         * const localDoc = new YDoc()
         * const localSV = encodeStateVector(localDoc)
         *
         * // document on machine B
         * const remoteDoc = new YDoc()
         * const remoteDelta = encodeStateAsUpdate(remoteDoc, localSV)
         *
         * applyUpdate(localDoc, remoteDelta)
         * ```
         */
    @Throws(Exception::class) fun `encodeStateVector`(`doc`: YDoc): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    uniffiRustCallWithError(Exception) { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_encode_state_vector(
        FfiConverterTypeYDoc.lower(`doc`),_status)
}
    )
    }
    
 fun `equalSnapshots`(`snap1`: YSnapshot, `snap2`: YSnapshot): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_equal_snapshots(
        FfiConverterTypeYSnapshot.lower(`snap1`),FfiConverterTypeYSnapshot.lower(`snap2`),_status)
}
    )
    }
    
 fun `snapshot`(`doc`: YDoc): YSnapshot {
            return FfiConverterTypeYSnapshot.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_yrs_uniffi_fn_func_snapshot(
        FfiConverterTypeYDoc.lower(`doc`),_status)
}
    )
    }
    


